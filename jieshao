史上最浅显易懂的Git教程！
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000
git:分布式版本控制系统。Git是目前世界上最先进的分布式版本控制系统（没有之一）。
	SVN和CVS都是集中式的版本控制系统。

	集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。

	集中式版本控制系统最大的毛病就是必须联网才能工作。

	分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。

	和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。

	在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。
版本控制系统：不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以
GitHub网站：为开源项目免费提供Git存储。
在Windows上安装Git：
	1.下载安装（百度云盘中有安装包）
	2.在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！
	3.安装完成后，还需要最后一步设置，在命令行输入：（Git Bash中）
		$ git config --global user.name "Your Name"
		$ git config --global user.email "email@example.com"
		因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。
		注意git config命令的--global参数，用了这个参数， 表示你这台机器上所有的Git仓库都会使用这个配置， 当然也可以对某个仓库指定不同的用户名和 Email 地址。
	4.版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。（Git Bash中）
		所以，创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：
		$ mkdir learngit
		$ cd learngit
		$ pwd
			/Users/michael/learngit   -------回车后自己就会出现
		pwd命令用于显示当前目录。在我的Mac上，这个仓库位于/Users/michael/learngit。
		如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。

		第二步，通过git init命令把这个目录变成Git可以管理的仓库：
		$ git init
		Initialized empty Git repository in /Users/michael/learngit/.git/   -------回车后自己就会出现
		瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。
		如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。

		把文件添加到版本库
			首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。

			不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。

			因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。

			使用Windows的童鞋要特别注意：

			千万不要使用Windows自带的记事本编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载Notepad++代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可

			现在我们编写一个readme.txt文件
			$ vi readme.txt  回车,输入gi，进入插入模式
								vi命令：可以添加，也可以修改文件
			文件内容为：
			Git is a version control system.
			Git is free software.
			按esc，光标移动到最末端，输入:wq，回车，会退到命令模式
			第一步，用命令git add告诉Git，把文件添加到仓库：
			$ git add readme.txt
			执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。

			第二步，用命令git commit告诉Git，把文件提交到仓库：
			$ git commit -m "wrote a readme file"   
			也写成$ git commit -m "add 1 files."
			[master (root-commit) eaadf4e] wrote a readme file   -------回车后自己就会出现
			 1 file changed, 2 insertions(+)
			 create mode 100644 readme.txt
			 简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。
			嫌麻烦不想输入-m "xxx"行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。
			git commit命令执行成功后会告诉你，1 file changed：1个文件被改动（我们新添加的readme.txt文件）；2 insertions：插入了两行内容（readme.txt有两行内容）。

			为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
				$ git add file1.html
				$ git add file2.txt
				$ git commit -m "add 2 files."
	小结

		现在总结一下两点内容：
		初始化一个Git仓库，使用git init命令。
		添加文件到Git仓库，分两步：

		使用命令git add <file>，注意，可反复多次使用，添加多个文件；
		使用命令git commit -m <message>，完成。
	$ git status命令可以让我们时刻掌握仓库当前的状态
	$ git commit -m "add distributed"告诉我们，被修改已提交
	$ git status  ----再次查看状态
	On branch master
	nothing to commit, working tree clean
	Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working tree clean）的。
	$ git log命令显示从最近到最远的提交日志
	$ git log --pretty=oneline
		1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -> master) append GPL
		e475afc93c209a690c39c13a46716e8fa000c366 add distributed
		eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file
		需要友情提示的是，你看到的一大串类似1094adb...的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。
		每提交一个新版本，实际上Git就会把它们自动串成一条时间线。如果使用可视化工具查看Git历史，就可以更清楚地看到提交历史的时间线
	回退到上一个版本
		首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
		$ git reset --hard HEAD^
		HEAD is now at e475afc add distributed   -------回车后自己就会出现
	撤销修改
		命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
		一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
		一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
		总之，就是让这个文件回到最近一次git commit或git add时的状态。

		命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区：
		$ git reset HEAD readme.txt
		git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本
	远程仓库：
		github 登录   ruinana 1432461870@qq.com  5密码 
		$ ssh-keygen -t rsa -C "youremail@example.com"  目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
		https://github.com/settings/ssh/new:点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容

		为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
		当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
		最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去

		https://github.com/new：创建仓库
			Initialize this repository with a README这个选项需选中，选中后这个就是远程库了，就能用于克隆
		https://github.com/ruinana/learn-git:
			$ git remote add origin git@github.com:ruinana/learn-git.git====在本地关联远程库
			添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库
			下一步，就可以把本地库的所有内容推送到远程库上：
			$ git push -u origin master=====用git push命令，实际上是把当前分支master推送到远程
				如出现(yes/no)?yes回车

			$ git push origin master=====把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！

		命令git clone克隆一个本地库
			$ git clone git@github.com:github用户名/远程库名称.git

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
$ mkdir 设置的git根目录名称
$ cd 设置的git根目录名称========================每次打开git bash都需要，写一
$ pwd  =====转到设置的git根目录名称下============下这两个，这样才能进入git目录
	$ cd  /小写盘符字母/文件夹     手动切换盘符
	修改默认路径：右击Git Bash图标>属性>快捷方式>目标栏目去掉--cd-to-home>起始位置改为自定义的git路径如：F:\Workspace\KYGitLabel。
$ git init  ======根目录变为管理文件的系统
$ vi 文件名称
gi ====编写模式
esc  ：wq  ====退出
$ git status
	On branch master
	Changes not staged for commit:
	未提交的更改提交：
	  (use "git add <file>..." to update what will be committed)
	  使用“git add <file> ”更新将提交的内容
	  (use "git checkout -- <file>..." to discard changes in working directory)
	  使用“git checkou <file> ”放弃工作目录中的更改
	  modified 名称
	  被修改的文件（上面显示红色的）
	  no changes added to commit (use "git add" and/or "git commit -a")
	  没有提交更改(使用"git add" 和/或 "git commit -a")
$ git add 文件名称（可多个）
$ git commit -m "add 文件数量 files"
$ vi 文件名称
gi ====编写模式
esc  ：wq  ====退出
$ git add 文件名称（可多个）=====添加到暂存区
$ git status    
	On branch master
	Changes to be committed:
	提交修改：
	  (use "git reset HEAD <file>..." to unstage)
    modified:   readme.txt  
    修改过的文件（上面显示绿色的）
$ git commit -m "标示名称(例如add distributed)"  ======把暂存区的所有修改提交到分支
	[master e475afc] add distributed
	 1 file changed, 1 insertion(+), 1 deletion(-)
$ git status
	On branch master
	nothing to commit, working tree clean
$ git log  =====提交日志
q ====会退到命令行模式
$ git log --pretty=oneline
$ git reset --hard HEAD^ =====回到到上一个版本
$ git log --pretty=oneline======没有了一个版本
$ cat 文件名称 ======查看该文件的内容(窗口不关闭)
$ git reset --hard 最新版本的前五位版本编码
$ cat 文件名称
$ git log --pretty=oneline ====最新版本回来了
$ git reset --hard HEAD^
$ git log --pretty=oneline(窗口已关闭)
$ git reflog=====用来记录你的每一次命令
$ git reset --hard 最新版本的前五位版本编码
$ cd html ===转到html文件夹
$ pwd
$ cd ..   ====返回上一目录
$ pwd
$ vi 文件名
gi  esc   :wq
$ ls -a===============查看都有哪些文件
$ ls 仓库文件夹名称====查看文件夹中的文件
$ ls 仓库文件夹名称/文件夹名称======ls只是查看，所以不用cd返回目录
$ git diff HEAD -- 文件名（与上一次的vi的文件名相同) ====查看工作区和版本库里面最新版本的区别
$ git checkout -- 文件名（与上面的相同)=====文件回到最近一次git commit或git add时的状态
$ vi 文件名
gi  esc   :wq
$ git add 文件名称（可多个）
$ git reset HEAD 文件名=======把暂存区的修改回退到工作区
$ rm 文件名=====Git知道你删除了文件，工作区和版本库就不一致了
$ git rm 文件名（与上面的相同)====从版本库中删除该文件。后面只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
$ git commit -m “标示名称”====提交更改
$ git checkout -- 文件名（与上一次的rm的文件名相同)====用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

$ git push -u origin master=====用git push命令，实际上是把当前分支master推送到远程
				如出现(yes/no)?yes回车
	$ git push origin master=====把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！

master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点
每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长
commit时，master分支向前移动
如果add时，添加标识，这时改变了HEAD指针
如果对标识分支进行修改和提交，标识指针向前移动，而master指针不会移动，HEAD指针也会移动。
HEAD指针指向标识
把master指向dev的当前提交，就可以把dev合并到master上
合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支

$ git checkout -b dev========创建dev分支，然后切换到dev分支
					git checkout命令加上-b参数表示创建并切换，相当于以下两条命令
					$ git branch dev
					$ git checkout dev
$ git branch================git branch命令查看当前分支
					git branch命令会列出所有分支，当前分支前面会标一个*号
$ vi 文件名  gi  esc  :wq===对文件进行修改
$ git add 文件名============提交
$ git checkout master======dev分支的工作完成，我们就可以切换回master分支，
					但修改的内容没有了，因为修改的内容在dev分支上

$ git branch -D dev==分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数

$ git merge dev============把dev分支的工作成果合并到master分支
					git merge命令用于合并指定分支到当前分支,Fast forward模式
					Fast forward模式，删除分支后，会丢掉分支信息
				$ git merge --no-ff -m "merge with no-ff" dev
					========准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward
					Git就会在merge时生成一个新的commit，从分支历史上可以看出分支信息
					因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去
$ git branch -d dev========合并完成后，就可以放心地删除dev分支了

$ git stash================工作时还没提交，但出现错误，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
					用git status查看工作区，就是干净的（除非有没有被GIT中管理的文件），因此可以放心地创建分支来修复错误
$ git checkout master======首先确定要在哪个分支上修复的bug，需要假定在master分支上修复，从就master创建临时分支
$ git checkout -b issue-101===创建临时分支
修复bug
$ git add 文件名============提交
$ git checkout master======切换回master分支
$ git merge --no-ff -m "merged bug fix 101" issue-101=======合并到master
$ git branch -d issue-101==删除修改bug的分支 
$ git checkout dev=========回到dev分支干活
$ git status===============工作区是干净的，刚才的工作现场存到哪去了？
$ git stash list===========用git stash list命令看看
					工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
					一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
					另一种方式是用git stash pop，恢复的同时把stash内容也删了
$ git stash pop============回复工作现场，并删除stash内容
$ git stash list===========看不到任何stash内容
$ git stash apply stash@{0}===============
					你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash
新增功能也应该在一个新的分支上开发，

$ pwd================看现在在什么位置，如果在本地仓库的内部
$ cd ..==============回退到本地仓库的父级为止
$ rm -rf 仓库文件名===删除本地git仓库
https://github.com/ruinana/learn-git/settings===========存档此存储库
$ git clone git@github.com:github用户名/远程库名称.git===依然可做修改
$ rm -rf 仓库文件名
https://github.com/ruinana/learn-git/settings===========删除此存储库
这次已经完全删除


$ git add 文件名称==============在github的仓库中添加已经在本地写好的网站文件夹
$ git status===================查看时候新增了
$ git commit -m "标识名称"======添加标识
$ git push -u origin master====把当前分支master推送到远程（-u 可以省略)
$ git pull --rebase origin master===如上面出错，就先进行合并
$ git push -u origin master=========再进行推送（-u 可以省略)

$ git rm --cached -r 文件名称==========删除git仓库文件
$ git commit -m "标识"================标识符号
$ git push===========================推送，现在已经删除远程的文件夹,但本地还保留













Linux、Unix、Mac和Windows：服务器系统软件








可选
	固态硬盘SSD  256即可=======两者
	机械硬盘HHD  500G即可======其一


必选
	处理器CPU，i5或者i7都可以，
	建议是i5 三代以上，I5 3210,i5后面的这个数字3就是指三代。
	处理器有分低耗版本，标准版本，高配版本，建议不要买低耗版。
	现在都2017年了，最好是买个i7的吧。

	内存条 买标准电压的， 建议买8G的，如果买的是4G的可以考虑加一根内存条，大约200多就可以了。

	屏幕买IPS，物理分辨率能达到1920×1080

=





每日所需膳食营养素供给量：
卡路里：1450~1740大卡
蛋白质：36.3~65.3g
碳水化合物：199.4~282.8g
脂肪：32.2~58g
钙：800mg
铁：20mg
锌：11.5mg
维生素A：700μgRE
维生素B1：1.3mg
维生素B2：1.2mg
维生素B5：400μgDFE
维生素B11：13mgNE

1千焦(kJ)=0.2389大卡(kcal)


1、我的豆浆（每袋30g含）
碳水化合物：18.12g  钠：42.9mg
能量：521.4KJ==124.56246kcal
蛋白质：4.65g       脂肪：3.3g
膳食纤维：1.53g     钙：120mg
维生素A：78μgRE    维生素D：0.54μg
2、我的粉（每100g含）（每25g约三勺含：13.325g,1.75mg，114.851175kcal，5.375g，4.4g）
碳水化合物：53.3g  钠：7mg
能量：1923KJ==459.4047kcal
蛋白质：21.5g     脂肪：17.6g
1、我的燕麦（每100g含）
能量：1576KJ==376.5064kcal
蛋白质：13g         脂肪：6.9g
碳水化合物：60g     膳食纤维：10g



标准体重：63kg
美体重：60kg
标准胸围：84.8cm
标准腰围：60.3cm
标准臀围：88cm
标准下腹围：75cm
标准上臂围：24.5cm
标准大腿围：50.5cm
标准小腿围：32.6cm
标准脚踝围：19.6cm

试用期考核情况：（该员工的优势、不足、应关注方面、应培养方向等）
主要写一下主要的工作内容,取得的成绩,以及不足,最后提出合理化的建议或者新的努力方向。
该员工在试用期间，主要完成了对支撑平台后期问题的修改和部分内容的更新，以及对工程财务职能分析平台的前端开发。在处理前端外的工作时，也积极认真得配合并完成分配到的工作。由于其对javascript有着中层的理解，能够编写一些基本的页面交互，希望在之后能够编写一些可以重复使用的效果代码。其学习能力还是比较强的，以后可以多学习一些新的在项目中用到的技术，提高页面效果交互能力等。

不足：js原生代码编写程序的能力不足以编写自用程序，
培养：原生代码的深度理解，移动端
优势：工作认真负责，学习能力较强


资深前端开发工程师
	1、熟悉HTML、CSS，精通Js，TS的面向对象编程，熟练掌握作用域以及闭包的原理；
	2、对VUE、Angular2、React深入理解，能编写组件、插件。
	3、具有移动跨平台开发能力，具有大型跨平台APP实战经验，能够编写原生插件。
	4、具有良好前端程序架构能力，能够实现微信、大众点评等类似应用框架，了解SSR。
	5、熟悉大规模移动端应用设计特点、调用优化等。
	6、对互联网新技术能主动了解，探究能力。
	6、本科以上学历，计算机相关专业，5年以上前端开发工作经验；

中级前端研发工程师	
	1.熟练使用HTML5，ES6、CSS3等移动端web开发技术,有Angular2框架使用经验；
	2.掌握JavaScript、Typescript、DOM、MVVM、NPM等前端技术，对脚手架有深入理解。
	3.掌握Gulp,Webpack等前端打包工具，熟悉常见跨域、跨浏览器问题，熟悉必要的计算机网络协议。
	4.具有移动端开发经验，熟悉ionic等移动端框架，具有编写小程序、公众号等能力。
	5.本科以上学历，计算机相关专业，3年以上前端开发工作经验；
问题：
	ES6：ECMAScript6是JavaScript语言的下一代标准
	浏览器兼容，一般测试哪些浏览器的兼容，不同浏览器的私有属性都是什么？
	使用过哪些图表插件？：echarts,ichartjs,highcharts
	使用过HTML5中的canvas,media这些属性？
	音频或者视频怎么做兼容？
	使用HTML5和CSS3做过些，其中遇到了什么问题？
	做过移动端开发?编写过小程序或者公众号之类的吗？
	前端开发语言：ES6&7,coffeescript,typescript
	前端开发框架使用过哪个,最熟悉的是？：angular,react,vue.js,angular2，最熟悉的是？
	前端打包工具使用过哪个,最熟悉的是？
	(前端开发工作经验大概几年了)
	PS怎么样？
	了解服务端？